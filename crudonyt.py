# -*- coding: utf-8 -*-
"""CRUDonYT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EHDgI2L1CA5BV8F_7cWn7uNGB5KCQMk8
"""

!pip install streamlit
from google.colab import drive
import google_auth_oauthlib.flow
import googleapiclient.discovery
import streamlit as st
import os
from googleapiclient.discovery import build
from google.oauth2 import service_account

# Install necessary libraries
!pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client oauth2client
!pip install google-auth-oauthlib==0.4.1
!pip install streamlit

# Function to authenticate with the provided credentials file
def authenticate(client_secrets_file):
    flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(
        client_secrets_file, ["https://www.googleapis.com/auth/youtube.force-ssl"]
    )
    credentials = flow.run_console()
    youtube = googleapiclient.discovery.build("youtube", "v3", credentials=credentials)
    return youtube

#Creating
def upload_video(youtube, video_file, title, description, category_id, tags):
    body = {
        'snippet': {
            'title': title,
            'description': description,
            'tags': tags,
            'categoryId': category_id,
        },
        'status': {
            'privacyStatus': 'private'
        }
    }

    request = youtube.videos().insert(
        part="snippet,status",
        body=body,
        media_body=video_file
    )
    response = request.execute()
    return response

#Reading
def get_video_details(youtube, video_id):
    request = youtube.videos().list(
        part="snippet,contentDetails,statistics",
        id=video_id
    )
    response = request.execute()
    return response

#Updating
def update_video_details(youtube, video_id, new_title=None, new_description=None, new_tags=None):
    video_details = get_video_details(youtube, video_id)
    categoryId = video_details['items'][0]['snippet'].get('categoryId')

    body = {'id': video_id}
    if new_title:
        body['snippet'] = {'title': new_title}
    if new_description:
        if 'snippet' not in body:
            body['snippet'] = {}
        body['snippet']['description'] = new_description
    if new_tags:
        if 'snippet' not in body:
            body['snippet'] = {}
        body['snippet']['tags'] = new_tags

    if categoryId:
        if 'snippet' not in body:
            body['snippet'] = {}
        body['snippet']['categoryId'] = categoryId

    if body:
        request = youtube.videos().update(
            part="snippet",
            body=body,
        )
        response = request.execute()
        return response
    else:
        return "No changes specified for update."

#Deleting
def delete_video(youtube, video_id):
    request = youtube.videos().delete(id=video_id)
    response = request.execute()
    return response

# Streamlit app
def main():
    st.title("YouTube Video Manager")

    # Tabs for CRUD operations
    tabs = st.tabs(["Upload", "Read", "Update", "Delete"])

    with tabs[0]: # Upload
        st.header("Upload Video")
        video_file = st.file_uploader("Choose a video file", type=["mp4"])
        title = st.text_input("Title")
        description = st.text_area("Description")
        category_id = st.text_input("Category ID")
        tags = st.text_input("Tags (comma-separated)")

        if st.button("Upload"):
            if video_file and title and description and category_id and tags:
                youtube = authenticate()
                tags_list = [tag.strip() for tag in tags.split(',')]
                upload_response = upload_video(youtube, video_file, title, description, category_id, tags_list)
                st.write(upload_response)
            else:
                st.warning("Please fill in all the fields.")

    with tabs[1]:  # Read
        st.header("Get Video Details")
        video_id = st.text_input("Enter Video ID")

        if st.button("Get Details"):
          if video_id:
              youtube = authenticate()
              video_details = get_video_details(youtube, video_id)
              st.write(video_details)

    with tabs[2]:  # Update
        st.header("Update Video Details")
        video_id = st.text_input("Enter Video ID")
        new_title = st.text_input("New Title")
        new_description = st.text_area("New Description")
        new_tags = st.text_input("New Tags (comma-separated)")
        if st.button("Update"):
            if video_id:
                youtube = authenticate()
                new_tags_list = [tag.strip() for tag in new_tags.split(',')] if new_tags else None
                update_response = update_video_details(youtube, video_id, new_title, new_description, new_tags_list)
                st.write(update_response)

    with tabs[3]:  # Delete
        st.header("Delete Video")
        video_id = st.text_input("Enter Video ID to delete")
        if st.button("Delete Video"):
          if video_id:
            youtube = authenticate()
            delete_response = delete_video(youtube, video_id)
            st.write(delete_response)

if __name__ == "__main__":
    main()

